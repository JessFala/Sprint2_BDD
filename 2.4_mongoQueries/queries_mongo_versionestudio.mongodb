
    //1-Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants.
db.restaurants.find({});

    //2-Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1});  
    
     //3-Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però exclou el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1});
    
    //4-Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però exclou el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{_id:0, restaurant_id:1, name:1, borough:1, "address.zipcode":1});
    
    //5-Escriu una consulta per mostrar tots els restaurants que estan en el Bronx.
db.restaurants.find({borough: "Bronx"});  //Dona totes les dades dels restaurants.
db.restaurants.find({}{borough: "Bronx"}); // Dona només les id's i les borought "Bronx".
    
    //6-Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx.
db.restaurants.find({borough: "Bronx"}).limit(5);  
    
    //7-Escriu una consulta per mostrar el pròxim 5 restaurants després de saltar els primers 5 del Bronx.
db.restaurants.find({borough: "Bronx"}).skip(5).limit(5);
db.restaurants.find({borough: "Bronx"}).skip(5).limit(10); // Dona els 10 resultats següents, no 5 com es demana.
db.restaurants.find({borough: "Bronx"}).limit(6,7,8,9,10); // No dona els mateixos resultats que la 1ª versió.
db.restaurants.find({borough: "Bronx"}).limit(6-10); // Dona resultats diferents al què demana l'enunciat. 

    //8-Escriu una consulta per trobar els restaurants que tenen un score de més de 90.  
 db.restaurants.find({grades:{$elemMatch: {score: {$gt: 90}}}}); 
    //## <$elemMatch> Per seleccionar documents si l'element del camp de matriu coincideix amb totes les consultes especificades (aquí "grade").
    //##<$gt> Per seleccionar documents on el valor d'un camp sigui MAJOR que el valor especificat (en aquest cas 90).
    
    //9-Escriu una consulta per trobar els restaurants que tenen un score de més de 80 però menys que 100.
db.restaurants.find(({"grades":{$elemMatch:{"score":{$gt:80,$lt:100}}}}));
   //## <$lt> Per seleccionar documents on el valor d'un camp sigui MENOR que el valor especificat (en aquest cas 100).
 
    //10-Escriu una consulta per trobar els restaurants que es localitzen en valor de latitud menys de -95.754168.
db.restaurants.find({"address.coord": {$lt: -95.754168}});
db.restaurants.find({ "address.coord.0": {$lt:-95.754168}}); // El .0 no canvia resultats.
   
   //11-Escriu una consulta de MongoDB per a trobar els restaurants que no preparen cap cuisine de 'American' i la seva qualificació és superior a 70 i latitud inferior a -65.754168.
 db.restaurants.find({$and: [{cuisine: {$ne :"American "}}, {"grades.score": {$gt: 70}}, {"address.coord" : {$lt: -65.754168}}]});  
    //## <$ne> Per seleccionar documents on el valor d'un camp NO sigui igual// SIGUI DIFERENT al  valor especificat.
    //<$and> Mostra un operador lògic (de conjunció) que fa seleccionar només els documents que acompleixen tots els requisits introduïts per l'$and.

    //12-Escriu una consulta per trobar els restaurants que no preparen cap cuisine de 'American' i van aconseguir un marcador més de 70 i localitzat en la longitud menys que -65.754168. Nota: Fes aquesta consulta sense utilitzar $and operador.
db.restaurants.find({cuisine: {$ne: "American "}, "grades.score": {$gt: 70}, "address.coord": {$lt : -65.754168} });
    
    //13-Escriu una consulta per trobar els restaurants que no preparen cap cuisine de 'American' i van obtenir un punt de grau 'A' no pertany a Brooklyn. S'ha de mostrar el document segons la cuisine en ordre descendent.
db.restaurants.find({cuisine: {$ne: "American"}, "grades.grade": "A", "borough": {$ne: "Brooklyn"}}).sort({"cuisine": -1});
    //## <sort> Mostra com ordenar els documents retornats per un o més camps en ordre ascendent i descendent (en aquest cas s'indica amb -1).

    //14-Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Wil' com les tres primeres lletres en el seu nom.
db.restaurants.find({name: {$regex: /^Wil/}}, {restaurant_id: 1, name: 1, cuisine: 1});
   //## <$regex> Proporciona les capacitats d'expressió regular que coincideixin amb els patrons que es donin a les consultes. 

   //15-Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'ces' com les últimes tres lletres en el seu nom.
db.restaurants.find({name: {$regex: /ces$/}}, {restaurant_id: 1, name: 1, cuisine: 1}); 
    //## </ces$/> Manera de dir que siguin les 3 últimes lletres.

    //16-Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Reg' com tres lletres en algun lloc en el seu nom.
db.restaurants.find({name: {$regex: /Reg/i}}, {restaurant_id: 1, name: 1, cuisine: 1});
    //## </Reg/> Per indicar que les lletres poden aparèixer en qualsevol lloc del nom.

    //17-Escriu una consulta per trobar els restaurants que pertanyen al Bronx i van preparar qualsevol plat americà o xinès.
db.restaurants.find({borough: "Bronx" , $or: [{cuisine: "American "}, {cuisine: "Chinese"}]});  
   //## <$or> Operador lògic disjuntiu per trobar documents.

   //18-Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que pertanyen a Staten Island o Queens o Bronx o Brooklyn.
db.restaurants.find({borough: {$in: ["Staten Island","Queens","Bronx","Brooklyn"]}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});  
    //##<$in> Selecciona documents on el valor del camp sigui IGUAL A QUALSEVOL VALOR de la matriu.

    //19-Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que NO pertanyen a Staten Island o Queens o Bronx o Brooklyn.
db.restaurants.find({borough :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});
    //##<$nin> Selecciona els documents on el valor del camp NO ÉS IGUAL a cap valor en la matriu.
   
    //20-Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que aconsegueixin un marcador que no és més de 10.
db.restaurants.find({"grades.0.score":{$lte:10}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1});
   
   //21-Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que preparen peix excepte 'American' i 'Chinees' o el name del restaurant comença amb lletres 'Wil'.
db.restaurants.find({$and: [{ cuisine: {$ne: "American"}}, {cuisine: {$ne: "Chinese"}}, {$or: [{cuisine: {$regex: /fish/i}}, {name: {$regex: /^Wil/i}}]} ] }, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });    
    
    //22-Escriu una consulta per trobar el restaurant_id, name, i grades per a aquells restaurants que aconsegueixin un grau "A" i un score 11 en dades d'estudi ISODate "2014-08-11T00:00:00Z".
db.restaurants.find({ grades: {$elemMatch: { date: ISODate("2014-08-11T00:00:00Z"), grade: "A", score: 11 }}}, {restaurant_id: 1, name: 1, grades: 1});    
    //## <$elemMatch> Selecciona els documents si l'element del camp de matriu coincideix amb totes les consultes especificades.
    
    //23-Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants on el 2n element de varietat de graus conté un grau de "A" i marcador 9 sobre un ISODate "2014-08-11T00:00:00Z".
 db.restaurants.find({grades: {elemMatch: {date: ISODate("2014-08-11T00:00:00Z"), grade: "A", score: 9 }}}, {restaurant_id: 1, name: 1, grades: 1});  
   
   //24-Escriu una consulta per trobar el restaurant_id, name, adreça i ubicació geogràfica per a aquells restaurants on el segon element del array coord conté un valor que és MÉS de 42 i fins a 52.
db.restaurants.find({"address.coord": {$gt : 42, $lte : 52}}, {restaurant_id: 1, name: 1, address: 1});   
   //## <$lte> Selecciona documents on el valor d'un camp és MENOR O IGUAL al valor especificat.
   
   //25-Escriu una consulta per organitzar el nom dels restaurants en ordre ascendent juntament amb totes les columnes.
db.restaurants.find().sort({name: 1});
    //##<sort()> Mostra com ordenar els documents retornats per un o més camps en ordre ascendent (1) i descendent (-1).
   
   //26-Escriu una consulta per organitzar el nom dels restaurants en ordre descendent juntament amb totes les columnes.
 db.restaurants.find().sort({name: -1});  
   
   //27-Escriu una consulta per organitzar el nom de la cuisine en ordre ascendent i pel mateix barri de cuisine. Ordre descendent.
db.restaurants.find().sort({cuisine: 1, borough: -1});  
   
   //28-Escriu una consulta per saber tant si totes les direccions contenen el carrer o no.
 db.restaurants.find({"address.street": {$ne: null}});  
   
   //29-Escriu una consulta que seleccionarà tots els documents en la col·lecció de restaurants on el valor del camp coord és Double.
 db.restaurants.find({"address.coord": {$type: "double"}});  
   //##<$type> Selecciona documents on el valor d'un camp és una instància de tipus BSON.

   //30-Escriu una consulta que seleccionarà el restaurant_id, name i grade per a aquells restaurants que retornin 0 com a resta després de dividir el marcador per 7.
 db.restaurants.find({"grades.score": {$mod: [7, 0]}}, {restaurant_id: 1, name: 1, grades: 1});   
    //##<$mod> Selecciona documents on el valor d'un camp dividit per un divisor té el residu especificat.

    //31-Escriu una consulta per trobar el name de restaurant, borough, longitud i altitud i cuisine per a aquells restaurants que contenen 'mon' com tres lletres en algun lloc del seu nom.
 db.restaurants.find({name: {$regex: /mon/i}}, {name: 1, borough: 1, "address.coord": 1, cuisine: 1});   
    //##</mon/i> Per indicar que les lletres donades poden ocupar qualsevol lloc dins la paraula.

    //32-Escriu una consulta per trobar el name de restaurant, borough, longitud i latitud i cuisine per a aquells restaurants que contenen 'Mad' com primeres tres lletres del seu nom.
db.restaurants.find({name: {$regex: /^Mad/i}}, {name: 1, borough: 1, "address.coord": 1, cuisine: 1});
    //##</^Mad/i> Per indicar que les lletres donades han d'ocupar una posició inicial.